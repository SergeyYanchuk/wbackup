<?php
require_once '../AppRegistry.php';
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-12 at 13:33:35.
 */

class AppRegistryTest extends PHPUnit_Framework_TestCase {
    
    const HOME_PATH = "/home/serj0987/";

    /**
     * @var AppRegistry
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {

    }
    
    function testInitHomePath()
    {
        $this->object = new AppRegistry('~/','gz');
        $this->assertEquals(rtrim(self::HOME_PATH,"/\\"), $this->object->getScanDir());
    }
    
        function testInitHomePath2()
    {
        $this->object = new AppRegistry('~/src','gz');
        $this->assertEquals('/home/serj0987/src', $this->object->getScanDir());
    }
    
    function testInitEmpthyPath()
    {
        try {
            $this->object = new AppRegistry('','gz');
        } catch (AppRegistryException $exc) {
            return;
        }
        $this->fail("Except AppRegistryException");
        
    }
    
    function testInitWrongPath()
    {
        try {
            $this->object = new AppRegistry('~/trulala/', 'gz');
        } catch (AppRegistryException $exc) {
            if ($exc->getCode() == 3 || $exc->getCode() == 4) 
                return;
        }
        $this->fail("Wrong dir patch not detected");
    }
    
    function testInitWrongFormat()
    {
        try {
            $this->object = new AppRegistry('~/', 'ffftjhnjmnj.gghhjk.jk');
        } catch (AppRegistryException $exc) {
            if ($exc->getCode() == 6) 
                return;
        }
        $this->fail("Wrong format not detected");
    }
    
    
    function testGenerateOutputFilename()
    {
        $this->object = new AppRegistry(self::HOME_PATH, 'gz');
        $path = $this->object->getOutputFilename();
    }
    
            
    function testInitThisPath()
    {
        $this->object = new AppRegistry("./",'gz');
        $this->assertEquals(rtrim(__DIR__,"/\\"), $this->object->getScanDir());
    }
    
        function testInitThisPath2()
    {
        $this->object = new AppRegistry("./t",'gz');
        $this->assertEquals(__DIR__.DIRECTORY_SEPARATOR."t", $this->object->getScanDir());
    }
    
    function testInitThisPath3()
    {
        $this->object = new AppRegistry("../tests",'gz');
        $this->assertEquals(rtrim(__DIR__,"/\\"), $this->object->getScanDir());
    }
    
        function testInitOutputFilename()
    {
        $this->object = new AppRegistry("../tests",'gz');
        $this->validatePath($this->object->getOutputFilename());
    }
    
            function testInitOutputFilename2()
    {
        $this->object = new AppRegistry("~/",'gz');
        $this->validatePath($this->object->getOutputFilename());
    }
    
            function testInitOutputFilename3()
    {
        $this->object = new AppRegistry("./t",'gz');
        $this->validatePath($this->object->getOutputFilename());
    }
    
    function validatePath($path)
    {
        $dir = dirname($path);
        if (!is_dir($dir))
            $this->fail('Wrong dir for backup file');
        
        $pos = strrpos($path, DIRECTORY_SEPARATOR);
        $filename = substr($path, $pos+1);
                
        $preffix = AppRegistry::OUTPUT_FILENAME_PREFFIX;
        $pattern = '/'.$preffix.'_+([1-2]+[0,9]+[0,1,2,9]+[0-9]+)+'
                . '[_]+([0-1]?[0-9]+)+[_]+([0-3]?[0-9]+)+[_]+'
                . '([0-2]?[0-9]+)+[_]+([0-5]?[0-9]+)+[_]'
                . '+([0-5]?[0-9]+)+[\.]+([a-zA-Z,0-9,\.]*)+/';
        echo $filename;
        if (preg_match($pattern, $filename)==NULL)
            $this->fail("Bad filename");
    }
    


    
    protected function tearDown() {
        
    }
    

}
