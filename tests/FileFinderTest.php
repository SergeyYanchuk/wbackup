<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-20 at 08:45:20.
 */
require_once '../FileFinder.php';

class FileFinderTest extends PHPUnit_Framework_TestCase {

    /**
     * @var FileFinder
     */
    protected $object;
    private $output_file = '/home/serj0987/1.zip';
    private $class;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $arc = new ZipArchive();
        
       $result = $arc->open($this->output_file, ZIPARCHIVE::CREATE);
        if ($result!=TRUE)
                $this->fail('Can\'t create archive');

        $this->class = new ReflectionClass('FileFinder');
        
        $this->object = new FileFinder($arc, '/home/serj0987');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers FileFinder::createBackup
     * @todo   Implement testCreateBackup().
     */
    public function testCreateBackup() {
        $this->object->createBackup();
        $arc = $this->object->getArchive();
        $result = $arc->close();
        var_dump($result);
        if (!file_exists($this->output_file))
            $this->fail('Backup file is not exist');
    }
    
    public function testGetLocalArcFilename1() {

        $method = $this->class->getMethod('getLocalArcFilename');
        $method->setAccessible(true);
        
        $result = $method->invoke($this->object, 
                '.bitcoin');
        $this->assertEquals($result, 'bitcoin/wallet.dat');
        
    }
    
        public function testGetLocalArcFilename2() {

        $method = $this->class->getMethod('getLocalArcFilename');
        $method->setAccessible(true);
        
        $result = $method->invoke($this->object, 
                'bitcoin');
        $this->assertEquals($result, FALSE);
        
    }
    
        public function testGetRealFilename1() {

        $method = $this->class->getMethod('getRealFilename');
        $method->setAccessible(true);
        
        $result = $method->invoke($this->object, 
                '/home/serj0987', '.bitcoin');
        
        $this->assertEquals($result, '/home/serj0987/.bitcoin/wallet.dat');
        
    }
    
        public function testGetRealFilename2() {

        $method = $this->class->getMethod('getRealFilename');
        $method->setAccessible(true);
        
        $result = $method->invoke($this->object, 
                '/home/serj098778', '.bitcoin');
        
        $this->assertEquals($result, FALSE);
        
    }
    


}
